@page "/register"
@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navMan

<div class="card" style="width: 20rem;">
    <h3 class="card-title">Register Now</h3>
    @if (!response)
    {
        <div class="alert alert-danger">
            <p>Something went wrong with the registration attempt</p>
        </div>
    }
    <div class="card-body">
        <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText id="email" class="form-control" @bind-Value="RegistrationModel.EmailAddress" />
                <ValidationMessage For="@(() => RegistrationModel.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="RegistrationModel.Password" />
                <ValidationMessage For="@(() => RegistrationModel.Password)" />
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="RegistrationModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegistrationModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </EditForm>
    </div>
</div>

@code
{
    private RegistrationModel RegistrationModel = new RegistrationModel();
    private bool response = true;

    private async Task HandleRegistration()
    {
        response = await _authRepo.Register(RegistrationModel);

        if (response)
        {
            _navMan.NavigateTo("/login");
        }
    }
}
